# Gradle
# Build your Java project and run tests with Gradle using a Gradle wrapper script.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/java

trigger:
- master

pool:
  vmImage: ubuntu-latest

steps:
- task: CmdLine@2
  inputs:
    script: 'ls'
   
- task: Gradle@2
  inputs:
    gradleWrapperFile: 'gradlew'
    tasks: 'build'
    publishJUnitResults: true
    testResultsFiles: '**/TEST-*.xml'
    gradleOptions: '-Xmx3072m'
    javaHomeOption: 'JDKVersion'
    jdkVersionOption: '1.8'
    jdkArchitectureOption: 'x64'
    sonarQubeRunAnalysis: false
    spotBugsAnalysis: false
- task: CmdLine@2
  inputs:
    script: |
     ls
     cd build && ls
     echo "Reports !"
     cd reports
     cd tests
     cd test && ls
     cd ..
     cd ..
     cd ..
     echo "Test results !"
     cd test-results
     cd test && ls
     cd ..
     cd ..
     echo "Classes !"
     cd classes
     echo "Groovy !"
     cd groovy
     cd test
     cd gr
     cd ntua
     cd ece 
     cd softeng17b && ls
     cd ..
     cd ..
     cd ..
     cd ..
     cd ..
     echo "Java !"
     cd java
     cd main
     cd gr
     cd ntua
     cd ece 
     cd softeng17b && ls
  displayName: 'Check'

# - task: Gradle@2
#   inputs:
#     workingDirectory: ''
#     gradleWrapperFile: 'gradlew'
#     gradleOptions: '-Xmx3072m'
#     javaHomeOption: 'JDKVersion'
#     jdkVersionOption: '1.8'
#     jdkArchitectureOption: 'x64'
#     publishJUnitResults: true
#     testResultsFiles: '**/TEST-*.xml'
#     codeCoverageToolOption: 'Cobertura'
#     codeCoverageClassFilesDirectories: 'gradle/wrapper/gradle-wrapper.jar'
#     tasks: 'build'
    
